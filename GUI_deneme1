from tkinter import messagebox
import tkinter as tk
from PIL import Image, ImageFont, ImageDraw

counter = 0

top = tk.Tk()
top.title('Board Game')

canvas = tk.Canvas(top)
canvas.pack()

l2 = tk.Label(top, text="color the board the way you wanted")
l2.config(font=("Courier", 14))
l2.pack()


def select_options():
    l = tk.Label(top, text="Choose searching algorithm")
    l.config(font=("Courier", 14))
    l.place(relx=0.1, rely=0.1, relwidth=0.75, relheight=0.1)

    Heuristic = tk.Button(master=top, text='Uniform Cost', width=25, font=('Helvetica', 20), bg='grey')
    Heuristic.place(relx=0.1, rely=0.2, relwidth=0.75, relheight=0.1)

    button1 = tk.Button(master=top, text='A*', width=25, font=('Helvetica', 20), bg='grey')
    button1.place(relx=0.1, rely=0.35, relwidth=0.75, relheight=0.1)





board1 = [[None] * 3 for _ in range(3)]


def check_board():
    freespaces = 0
    redspaces = 0
    greenspaces = 0
    bluespaces = 0
    for i, row in enumerate(board1):
        for j, column in enumerate(row):
            if board1[i][j] == "red":
                redspaces += 1
            elif board1[i][j] == "green":
                greenspaces += 1
            elif board1[i][j] == "blue":
                bluespaces += 1
            elif board1[i][j] == None:
                freespaces += 1


def on_click(i, j, event):
    global counter

    if counter < 3:
        if board1[i][j] == None:
            color = "red"
            color2 = "green"
            color3 = "blue"
            if counter == 0:
                event.widget.config(bg=color)
                board1[i][j] = color
                counter += 1

            elif counter == 1:
                event.widget.config(bg=color2)
                board1[i][j] = color2
                counter += 1

            elif counter == 2:
                event.widget.config(bg=color3)
                board1[i][j] = color3
                counter += 1


        else:
            messagebox.showinfo("Alert", "This square is already occupied!")
        check_board()  # her tıkladıktan sonra checkboard yapıyor kutu boş mu değil mi diye bakmak için
    else:
        messagebox.showinfo("Alert", "You already choose 3 colors")

    print()



def redraw():
    global gameframe
    gameframe = tk.Frame(top, bg='black')
    gameframe.place(relx=0.4, rely=0.4)

    for i, row in enumerate(board1):
        for j, column in enumerate(row):
            # name = str(i)+str(j)
            L = tk.Label(gameframe, text='    ', bg="light blue" if board1[i][j] == None else board1[i][j])
            L.grid(row=i, column=j, padx='4', pady='4')
            L.bind('<Button-1>', lambda e, i=i, j=j: on_click(i, j, e))

btn = tk.Button(top, text ="Click to open a new window",command = select_options)


btn.pack(pady = 10)

redraw()
top.mainloop()

class Node:
    def _init_(self, board1, cost, tiles_order, prev_node=None):
        self.board = board1
        self.cost = cost
        self.tiles_order = tiles_order
        self.prev_node = prev_node
        self.heuristic = self.hamming_distance()

    def _lt_(self, other):
        return self.cost + self.heuristic < other.cost + other.heuristic

    def hamming_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board1[i][j] != '.' and self.board1[i][j] != self.tiles_order[i][j]:
                    distance += 1
        return distance
